import imaplib
import email
from email.header import decode_header
import os
import zipfile
import pandas as pd
import re
import requests
import base64
from datetime import datetime
from dotenv import load_dotenv
import hashlib
import logging
import gspread
from google.oauth2.service_account import Credentials

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('logs', exist_ok=True)
    log_filename = f"logs/emex_log_{datetime.now().strftime('%Y-%m-%d')}.log"
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
    logger.handlers.clear()
    
    # Handler –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(log_filename, encoding='utf-8')
    file_handler.setFormatter(formatter)
    file_handler.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    
    # Handler –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    console_handler.setLevel(logging.INFO)
    logger.addHandler(console_handler)
    
    return logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = setup_logging()

def log_and_print(message, level="info"):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    if level == "error":
        logger.error(message)
    elif level == "warning":
        logger.warning(message)
    else:
        logger.info(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
def is_email_processed(subject):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å—å–º–æ —Å –¥–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞)
    processed_file = "/app/processed_emails.txt"
    if os.path.exists(processed_file):
        with open(processed_file, 'r', encoding='utf-8') as f:
            processed = f.read().splitlines()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º—É –ø–∏—Å—å–º–∞ (–ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å –¥–æ |)
        processed_subjects = [line.split('|')[0] for line in processed if '|' in line]
        return subject in processed_subjects
    return False

def mark_email_processed(subject):
    """–û—Ç–º–µ—á–∞–µ—Ç –ø–∏—Å—å–º–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø–æ —Ç–µ–º–µ"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ (–ø—Ä–∏–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞)
    processed_file = "/app/processed_emails.txt"
    
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    entry = f"{subject}|{timestamp}"
    
    with open(processed_file, 'a', encoding='utf-8') as f:
        f.write(f"{entry}\n")
    log_and_print(f"üìù –ü–∏—Å—å–º–æ '{subject}' –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
def get_google_sheets_client():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
        scopes = [
            'https://www.googleapis.com/auth/spreadsheets',
            'https://www.googleapis.com/auth/drive'
        ]
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        creds = Credentials.from_service_account_file(CREDENTIALS_FILE, scopes=scopes)
        client = gspread.authorize(creds)
        
        log_and_print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return client
    except Exception as e:
        log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}", "error")
        return None

def load_google_sheets_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"""
    if not SPREADSHEET_ID:
        log_and_print("‚ö†Ô∏è SPREADSHEET_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "warning")
        return pd.DataFrame()
    
    try:
        client = get_google_sheets_client()
        if not client:
            return pd.DataFrame()
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = sheet.get_all_records()
        df = pd.DataFrame(data)
        
        log_and_print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë—Ä–µ–Ω–¥', '–¶–µ–Ω–∞', '–ö–æ–ª-–≤–æ', '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            log_and_print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã –≤ Google —Ç–∞–±–ª–∏—Ü–µ: {missing_columns}", "warning")
            return pd.DataFrame()
        
        return df
        
    except Exception as e:
        log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}", "error")
        return pd.DataFrame()

def update_google_sheets_stock(stock_updates):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤ Google —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º"""
    if not SPREADSHEET_ID or stock_updates.empty:
        return False
    
    try:
        client = get_google_sheets_client()
        if not client:
            return False
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        all_values = sheet.get_all_values()
        
        if not all_values:
            log_and_print("‚ùå Google —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞", "error")
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ "–ö–æ–ª-–≤–æ" (E - —ç—Ç–æ 5-–π —Å—Ç–æ–ª–±–µ—Ü)
        header_row = all_values[0]
        qty_col_index = None
        article_col_index = None
        
        for i, col_name in enumerate(header_row):
            if '–∫–æ–ª-–≤–æ' in col_name.lower():
                qty_col_index = i
            if '–∞—Ä—Ç–∏–∫—É–ª' in col_name.lower():
                article_col_index = i
        
        if qty_col_index is None or article_col_index is None:
            log_and_print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã '–ê—Ä—Ç–∏–∫—É–ª' –∏–ª–∏ '–ö–æ–ª-–≤–æ' –≤ Google —Ç–∞–±–ª–∏—Ü–µ", "error")
            return False
        
        log_and_print(f"üîç –ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: –ê—Ä—Ç–∏–∫—É–ª (–∏–Ω–¥–µ–∫—Å {article_col_index}), –ö–æ–ª-–≤–æ (–∏–Ω–¥–µ–∫—Å {qty_col_index})")
        
        updated_count = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        for row_idx in range(1, len(all_values)):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            article = all_values[row_idx][article_col_index].strip()
            
            # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            matching_stock = stock_updates[stock_updates['‚Ññ –î–µ—Ç–∞–ª–∏'] == article]
            
            if not matching_stock.empty:
                new_qty = int(matching_stock.iloc[0]['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç'])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (row_idx + 1 –ø–æ—Ç–æ–º—É —á—Ç–æ gspread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-based –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é)
                cell = sheet.cell(row_idx + 1, qty_col_index + 1)
                if cell.value != str(new_qty):
                    sheet.update_cell(row_idx + 1, qty_col_index + 1, new_qty)
                    updated_count += 1
                    log_and_print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è {article}: {new_qty}")
        
        log_and_print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –∑–∞–ø–∏—Å–µ–π –≤ Google —Ç–∞–±–ª–∏—Ü–µ")
        return True
        
    except Exception as e:
        log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}", "error")
        return False

"""
–ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô:

v3.0 - –§–£–ù–î–ê–ú–ï–ù–¢–ê–õ–¨–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets:
- –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: —Ü–µ–Ω—ã —Ç–µ–ø–µ—Ä—å –±–µ—Ä—É—Ç—Å—è –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
- –û—Å—Ç–∞—Ç–∫–∏ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏–∑ –ø–æ—á—Ç—ã (1–° –≤—ã–≥—Ä—É–∑–∫–∏)
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets API —á–µ—Ä–µ–∑ gspread
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Google —Ç–∞–±–ª–∏—Ü—ã: –ê—Ä—Ç–∏–∫—É–ª | –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ | –ë—Ä–µ–Ω–¥ | –¶–µ–Ω–∞ | –ö–æ–ª-–≤–æ | –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å
- –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
  1. –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ email (—Ç–æ–ª—å–∫–æ –ê—Ä—Ç–∏–∫—É–ª + –ö–æ–ª-–≤–æ)
  2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–ö–æ–ª-–≤–æ" –≤ Google —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
  3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é Google —Ç–∞–±–ª–∏—Ü—É
  4. –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
  5. –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
  6. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ GitHub –∫–∞–∫ Excel —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: google-auth, gspread, google-api-python-client
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: SPREADSHEET_ID, SHEET_NAME
- –ò–∑–º–µ–Ω–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è upload_feed_to_github: —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç DataFrame –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏

v2.1 - –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–æ–≤—É—é –ø–æ—á—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É:
- –û–±–Ω–æ–≤–ª—ë–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º: "–û—Å—Ç–∞—Ç–∫–∏ –ü–æ–¥–æ–ª—å—Å–∫ –æ—Ç" –≤–º–µ—Å—Ç–æ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ—Ç"
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ–¥ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É:
  * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "–ê—Ä—Ç–∏–∫—É–ª"
  * –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ "–ê—Ä—Ç–∏–∫—É–ª" –∏ "–í –Ω–∞–ª–∏—á–∏–∏"/"–°–µ–π—á–∞—Å"
  * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–û—Å—Ç–∞—Ç–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤"
- –£—Ç–æ—á–Ω–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏: 2 —Ç–æ–ª—å–∫–æ –¥–ª—è "–¥–∏—Å–∫ —Ç–æ—Ä–º–æ–∑–Ω–æ–π", 1 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ "price_for_emex.csv" –∏ "price_for_emex.xlsx"
- –ò—Å–∫–ª—é—á–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
- –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤: ‚Ññ –¥–µ—Ç–∞–ª–∏, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ú–∞—Ä–∫–∞, –¶–µ–Ω–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ü–∞—Ä—Ç–∏–æ–Ω–Ω–æ—Å—Ç—å
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–∞ –Ω–∞ GitHub Pages –¥–ª—è EMEX
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ .env —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –°–æ–∑–¥–∞–Ω .gitignore –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ Git

v2.0 - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:
- –ò–∑–º–µ–Ω—ë–Ω –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤: –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ë—Ä–µ–Ω–¥, –¶–µ–Ω–∞, –û—Å—Ç–∞—Ç–∫–∏, –ö—Ä–∞—Ç–Ω–æ—Å—Ç—å
- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã —Å—Ç–æ–ª–±—Ü—ã: ‚Ññ –î–µ—Ç–∞–ª–∏ ‚Üí –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ ‚Üí –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, 
  –ú–∞—Ä–∫–∞ ‚Üí –ë—Ä–µ–Ω–¥, –¶–µ–Ω–∞ –¥–µ—Ç–∞–ª–∏ ‚Üí –¶–µ–Ω–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç ‚Üí –û—Å—Ç–∞—Ç–∫–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞—Ü–µ–Ω–∫–∞ 20% –∫ —Ü–µ–Ω–∞–º —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —Å–æ—Ç—ã—Ö
- –û–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏: –º–∞–∫—Å–∏–º—É–º 10 —à—Ç—É–∫ (–µ—Å–ª–∏ –±–æ–ª—å—à–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 10)
- –î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü "–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å": 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, 2 –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ —Å–ª–æ–≤–æ–º "–¥–∏—Å–∫"
- –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º —Å —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—Å—Ç–∞—Ç–∫–æ–≤ (—É–±—Ä–∞–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã)

v1.0 - –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–æ–≤ –∏–∑ Gmail
- –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∏ –æ—Å—Ç–∞—Ç–∫–∞—Ö
- –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV –∏ XLSX —Ñ–æ—Ä–º–∞—Ç—ã
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã
EMAIL = os.getenv("EMAIL", "daniil.syryh@gmail.com")
PASSWORD = os.getenv("PASSWORD", "adgr vgml pqye ljnq")  # –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
IMAP_SERVER = os.getenv("IMAP_SERVER", "imap.gmail.com")
SAVE_DIR = "downloads"
RESULT_DIR = "result"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–¥–∞ –Ω–∞ GitHub
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN", "")  # –¢–æ–∫–µ–Ω GitHub –∏–∑ .env —Ñ–∞–π–ª–∞
GITHUB_REPO = os.getenv("GITHUB_REPO", "")    # –ù–∞–ø—Ä–∏–º–µ—Ä: "username/emex-feed"
FEED_URL = os.getenv("FEED_URL", "")          # –ë—É–¥—É—â–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–¥

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Google Sheets
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "")
SHEET_NAME = os.getenv("SHEET_NAME", "Sheet1")
CREDENTIALS_FILE = "credentials.json"

# –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–µ –ø–∏—Å—å–º–∞
SUBJECT_PATTERN = re.compile(r"–û—Å—Ç–∞—Ç–∫–∏ –ü–æ–¥–æ–ª—å—Å–∫ –æ—Ç")

# –ü–æ–ª—É—á–µ–Ω–∏–µ ZIP –≤–ª–æ–∂–µ–Ω–∏—è
def get_mail_attachments():
    log_and_print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–∏—Å–µ–º —Å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞–º–∏...")
    
    if not os.path.exists(SAVE_DIR):
        os.makedirs(SAVE_DIR)

    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, PASSWORD)
    mail.select("inbox")
    log_and_print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    status, messages = mail.search(None, 'ALL')
    email_ids = messages[0].split()
    log_and_print(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –ø–∏—Å–µ–º –≤ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ")

    for email_id in reversed(email_ids):
        status, msg_data = mail.fetch(email_id, "RFC822")
        if status != 'OK':
            continue

        msg = email.message_from_bytes(msg_data[0][1])
        subject_header = decode_header(msg["Subject"])
        subject_parts = []
        for s, enc in subject_header:
            if isinstance(s, bytes):
                s = s.decode(enc if enc else "utf-8")
            subject_parts.append(s)
        subject = ''.join(subject_parts)

        log_and_print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å—å–º–∞ —Å —Ç–µ–º–æ–π: {subject}")

        if not SUBJECT_PATTERN.search(subject):
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –ø–∏—Å—å–º–æ
        if is_email_processed(subject):
            log_and_print(f"üìß –ü–∏—Å—å–º–æ '{subject}' —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        log_and_print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ: {subject}")

        for part in msg.walk():
            if part.get_content_maintype() == 'multipart':
                continue
            if part.get('Content-Disposition') is None:
                continue

            filename = part.get_filename()
            if filename:
                decoded_filename = decode_header(filename)[0][0]
                if isinstance(decoded_filename, bytes):
                    decoded_filename = decoded_filename.decode()

                if decoded_filename.endswith(".zip"):
                    filepath = os.path.join(SAVE_DIR, decoded_filename)
                    with open(filepath, "wb") as f:
                        f.write(part.get_payload(decode=True))
                    log_and_print(f"üì¶ –°–∫–∞—á–∞–Ω –∞—Ä—Ö–∏–≤: {decoded_filename}")
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂: –ø—É—Ç—å –∫ –∞—Ä—Ö–∏–≤—É –∏ —Ç–µ–º—É –ø–∏—Å—å–º–∞
                    return filepath, subject
    
    log_and_print("üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –∞—Ä—Ö–∏–≤–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None, None

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
def unzip_archive(zip_path, extract_to=SAVE_DIR):
    extracted_files = []
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
        extracted_files = zip_ref.namelist()
    log_and_print(f"üìÅ –†–∞—Å–ø–∞–∫–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã: {extracted_files}")
    return [os.path.join(extract_to, f) for f in extracted_files]

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–æ–≤
def load_stock_data(files):
    for f in files:
        if '–æ—Å—Ç–∞—Ç–∫–∏' in f.lower() and f.endswith('.xlsx'):
            log_and_print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {f}")
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ "–ê—Ä—Ç–∏–∫—É–ª" –∏ "–í –Ω–∞–ª–∏—á–∏–∏"
            header_row = None
            for i in range(15):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
                try:
                    df_check = pd.read_excel(f, skiprows=i, nrows=1)
                    columns = [str(col).lower() for col in df_check.columns]
                    if any('–∞—Ä—Ç–∏–∫—É–ª' in col for col in columns):
                        header_row = i
                        break
                except:
                    continue
            
            if header_row is None:
                log_and_print("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ '–ê—Ä—Ç–∏–∫—É–ª'")
                continue
                
            df = pd.read_excel(f, skiprows=header_row)
            log_and_print(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ {header_row + 1}")
            log_and_print("–°—Ç–æ–ª–±—Ü—ã:", list(df.columns))
            
            # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            article_col = None
            quantity_col = None
            
            for col in df.columns:
                col_str = str(col).lower()
                if '–∞—Ä—Ç–∏–∫—É–ª' in col_str:
                    article_col = col
                elif '–¥–æ—Å—Ç—É–ø–Ω–æ' in col_str:
                    quantity_col = col
            
            if article_col is None or quantity_col is None:
                log_and_print(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ê—Ä—Ç–∏–∫—É–ª: {article_col}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_col}")
                continue
                
            log_and_print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–æ–ª–±—Ü—ã: '{article_col}' (–∞—Ä—Ç–∏–∫—É–ª), '{quantity_col}' (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            stock_df = df[[article_col, quantity_col]].copy()
            stock_df.columns = ['‚Ññ –î–µ—Ç–∞–ª–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç']
            
            # –û—á–∏—â–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã
            stock_df['‚Ññ –î–µ—Ç–∞–ª–∏'] = stock_df['‚Ññ –î–µ—Ç–∞–ª–∏'].astype(str).str.strip()
            
            # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
            stock_df = stock_df.dropna(subset=['‚Ññ –î–µ—Ç–∞–ª–∏'])
            
            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –∞—Ä—Ç–∏–∫—É–ª —ç—Ç–æ 'nan'
            stock_df = stock_df[stock_df['‚Ññ –î–µ—Ç–∞–ª–∏'] != 'nan']
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            stock_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç'] = pd.to_numeric(stock_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç'], errors='coerce').fillna(0)
            
            log_and_print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_df)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            log_and_print("–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
            log_and_print(stock_df.head())
            
            return stock_df
    
    log_and_print("–§–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return pd.DataFrame(columns=['‚Ññ –î–µ—Ç–∞–ª–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç'])

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–∞ –Ω–∞ GitHub Pages
def upload_feed_to_github(df_data, filename="price_for_emex.xlsx"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DataFrame –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
    if not GITHUB_TOKEN or not GITHUB_REPO:
        log_and_print("‚ö†Ô∏è GitHub –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∏–¥–∞.", "warning")
        log_and_print("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ GITHUB_TOKEN –∏ GITHUB_REPO –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", "warning")
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        log_and_print("üìä –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...")
        import io
        excel_buffer = io.BytesIO()
        df_data.to_excel(excel_buffer, index=False, header=True, engine='openpyxl')
        excel_content = excel_buffer.getvalue()
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è GitHub API
        url = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{filename}"
        headers = {
            "Authorization": f"token {GITHUB_TOKEN}",
            "Accept": "application/vnd.github.v3+json"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω—É–∂–µ–Ω SHA)
        get_response = requests.get(url, headers=headers)
        sha = None
        current_content = None
        
        if get_response.status_code == 200:
            file_data = get_response.json()
            sha = file_data['sha']
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (Excel —Ñ–∞–π–ª)
            current_content = base64.b64decode(file_data['content'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        if current_content == excel_content:
            log_and_print("üìÑ –î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return True
        
        log_and_print("üìÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≥—Ä—É–∂–∞–µ–º...")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if current_content:
            log_and_print(f"üîç –†–∞–∑–º–µ—Ä —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {len(current_content)} –±–∞–π—Ç")
            log_and_print(f"üîç –†–∞–∑–º–µ—Ä –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {len(excel_content)} –±–∞–π—Ç")
        else:
            log_and_print("üîç –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞")
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –¥–ª—è GitHub API
        encoded_content = base64.b64encode(excel_content).decode('utf-8')
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        data = {
            "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–¥–∞ EMEX - {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            "content": encoded_content
        }
        
        if sha:
            data["sha"] = sha
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.put(url, json=data, headers=headers)
        
        if response.status_code in [200, 201]:
            feed_url = f"https://raw.githubusercontent.com/{GITHUB_REPO}/refs/heads/main/{filename}"
            log_and_print(f"‚úÖ Excel —Ñ–∏–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            log_and_print(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∏–¥: {feed_url}")
            return True
        else:
            log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–¥–∞: {response.status_code}", "error")
            log_and_print(f"–û—Ç–≤–µ—Ç: {response.text}", "error")
            return False
            
    except Exception as e:
        log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–¥–∞: {e}", "error")
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
def process_google_sheets_with_stock(stock_df):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –≤ Google —Ç–∞–±–ª–∏—Ü–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–¥"""
    if not os.path.exists(RESULT_DIR):
        os.makedirs(RESULT_DIR)
    
    try:
        # –®–∞–≥ 1: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤ Google —Ç–∞–±–ª–∏—Ü–µ
        log_and_print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≤ Google —Ç–∞–±–ª–∏—Ü–µ...")
        update_success = update_google_sheets_stock(stock_df)
        
        if not update_success:
            log_and_print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google —Ç–∞–±–ª–∏—Ü—ã", "error")
            return False
        
        # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã
        log_and_print("üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã...")
        google_df = load_google_sheets_data()
        
        if google_df.empty:
            log_and_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã", "error")
            return False
        
        log_and_print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(google_df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã")
        
        # –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º
        google_df['–ê—Ä—Ç–∏–∫—É–ª'] = google_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        google_df['–ö–æ–ª-–≤–æ'] = pd.to_numeric(google_df['–ö–æ–ª-–≤–æ'], errors='coerce').fillna(0).astype(int)
        google_df['–¶–µ–Ω–∞'] = pd.to_numeric(google_df['–¶–µ–Ω–∞'], errors='coerce').fillna(0)
        google_df['–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å'] = pd.to_numeric(google_df['–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å'], errors='coerce').fillna(1).astype(int)
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        filtered_df = google_df[google_df['–ö–æ–ª-–≤–æ'] > 0].copy()
        log_and_print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {len(filtered_df)} –∑–∞–ø–∏—Å–µ–π")
        
        if filtered_df.empty:
            log_and_print("‚ö†Ô∏è –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏", "warning")
            return False
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –¥–æ 10 —à—Ç—É–∫
        filtered_df['–ö–æ–ª-–≤–æ'] = filtered_df['–ö–æ–ª-–≤–æ'].apply(lambda x: min(x, 10))
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        final_df = filtered_df.copy()
        final_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ë—Ä–µ–Ω–¥', '–¶–µ–Ω–∞', '–ö–æ–ª-–≤–æ', '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        result_path_csv = os.path.join(RESULT_DIR, "price_for_emex.csv")
        result_path_xlsx = os.path.join(RESULT_DIR, "price_for_emex.xlsx")
        
        final_df.to_csv(result_path_csv, index=False, sep=',', encoding='utf-8-sig')
        final_df.to_excel(result_path_xlsx, index=False, engine='openpyxl')
        
        log_and_print(f"üíæ –°–æ–∑–¥–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã: {result_path_csv}, {result_path_xlsx}")
        log_and_print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç: {len(final_df)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –®–∞–≥ 4: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ GitHub Pages
        log_and_print("\nüì° –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–∞ –Ω–∞ GitHub Pages...")
        upload_success = upload_feed_to_github(final_df, "price_for_emex.xlsx")
        
        if upload_success:
            log_and_print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            log_and_print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub –Ω–µ —É–¥–∞–ª–∞—Å—å", "warning")
            return False
            
    except Exception as e:
        log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", "error")
        return False

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    log_and_print("üöÄ ===== –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò EMEX =====")
    log_and_print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        zip_file, subject = get_mail_attachments()
        if zip_file and subject:
            log_and_print(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {subject}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏–∑ –∞—Ä—Ö–∏–≤–∞
            extracted = unzip_archive(zip_file)
            stock_df = load_stock_data(extracted)
            
            if stock_df.empty:
                log_and_print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö", "error")
            else:
                log_and_print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(stock_df)} –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Google —Ç–∞–±–ª–∏—Ü–µ–π
                success = process_google_sheets_with_stock(stock_df)
                
                if success:
                    mark_email_processed(subject)
                    log_and_print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ '{subject}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    log_and_print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞ '{subject}'", "error")
        else:
            log_and_print("üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    except Exception as e:
        log_and_print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", "error")
        import traceback
        log_and_print(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}", "error")
    
    finally:
        log_and_print("üèÅ ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò EMEX =====")